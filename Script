local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")

local flying = false
local flySpeed = 50
local bv, bg
local vertical = 0

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "Hyper Project"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

-- Helper: Make buttons draggable (mobile + PC compatible)
local function makeDraggable(obj)
	local dragging, dragInput, dragStart, startPos

	obj.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = obj.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	obj.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	RunService.Heartbeat:Connect(function()
		if dragging and dragInput then
			local delta = dragInput.Position - dragStart
			obj.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

-- Container for movement buttons
local buttonContainer = Instance.new("Frame")
buttonContainer.Size = UDim2.new(1, 0, 1, 0)
buttonContainer.BackgroundTransparency = 1
buttonContainer.Parent = gui

-- Function to make up/down movement buttons
local function makeVerticalBtn(label, position, direction)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, 60, 0, 60)
	btn.Position = position
	btn.Text = label
	btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.Font = Enum.Font.SourceSansBold
	btn.TextSize = 24
	btn.Parent = buttonContainer
	btn.Active = true
	btn.Selectable = true
	btn.ZIndex = 10

	btn.MouseButton1Down:Connect(function()
		vertical = direction
	end)
	btn.MouseButton1Up:Connect(function()
		vertical = 0
	end)

	makeDraggable(btn)
end

-- Create Up and Down buttons
makeVerticalBtn("↑", UDim2.new(0.85, 0, 0.65, 0), 1)
makeVerticalBtn("↓", UDim2.new(0.85, 0, 0.75, 0), -1)

-- Fly Button
local flyBtn = Instance.new("TextButton")
flyBtn.Size = UDim2.new(0, 100, 0, 50)
flyBtn.Position = UDim2.new(0.4, 0, 0.85, 0)
flyBtn.Text = "Fly: OFF"
flyBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
flyBtn.TextColor3 = Color3.new(1, 1, 1)
flyBtn.Font = Enum.Font.SourceSansBold
flyBtn.TextSize = 20
flyBtn.ZIndex = 10
flyBtn.Parent = buttonContainer
flyBtn.Active = true
flyBtn.Selectable = true

makeDraggable(flyBtn)

-- GUI Toggle Button
local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 100, 0, 40)
toggleBtn.Position = UDim2.new(0.02, 0, 0.05, 0)
toggleBtn.Text = "☰ Hyper"
toggleBtn.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.SourceSans
toggleBtn.TextSize = 20
toggleBtn.Parent = gui
toggleBtn.ZIndex = 10
toggleBtn.Active = true
toggleBtn.Selectable = true

makeDraggable(toggleBtn)

toggleBtn.MouseButton1Click:Connect(function()
	buttonContainer.Visible = not buttonContainer.Visible
end)

-- Fly Toggle Logic
flyBtn.MouseButton1Click:Connect(function()
	flying = not flying
	flyBtn.Text = flying and "Fly: ON" or "Fly: OFF"
	flyBtn.BackgroundColor3 = flying and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(40, 40, 40)

	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:FindFirstChild("HumanoidRootPart")
	local hum = char:FindFirstChildOfClass("Humanoid")
	if not hrp or not hum then return end

	if flying then
		hum:ChangeState(Enum.HumanoidStateType.Physics)

		bg = Instance.new("BodyGyro", hrp)
		bg.P = 9e4
		bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
		bg.CFrame = hrp.CFrame

		bv = Instance.new("BodyVelocity", hrp)
		bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
		bv.Velocity = Vector3.zero
	else
		if bv then bv:Destroy() bv = nil end
		if bg then bg:Destroy() bg = nil end
		vertical = 0
		hum:ChangeState(Enum.HumanoidStateType.Running)
		if hrp then
			hrp.Velocity = Vector3.zero
			hrp.RotVelocity = Vector3.zero
		end
	end
end)

-- Movement update (fly control)
RunService.RenderStepped:Connect(function()
	if flying and bv and bg and player.Character then
		local char = player.Character
		local hrp = char:FindFirstChild("HumanoidRootPart")
		local hum = char:FindFirstChildOfClass("Humanoid")
		if not hrp or not hum then return end

		local moveDir = hum.MoveDirection
		local verticalVec = Vector3.new(0, vertical, 0)
		bg.CFrame = hrp.CFrame

		local combined = moveDir + verticalVec
		bv.Velocity = combined.Magnitude > 0 and combined.Unit * flySpeed or Vector3.zero
	end
end)
